# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P5g_x0b04T1Z97W7t6Fu3crN_Ny5xXlZ

A Graph search*
"""

from queue import PriorityQueue

# Fungsi untuk algoritma A* Graph Search
def a_star_search(graph, start, goal, heuristic):
    frontier = PriorityQueue()  # Antrian prioritas untuk menyimpan simpul yang akan dieksplorasi
    frontier.put((0, start))  # Menambahkan simpul awal ke dalam antrian dengan nilai prioritas 0
    explored = set()  # Set untuk menyimpan simpul yang sudah dieksplorasi
    path = {}

    while not frontier.empty():
        current_priority, current = frontier.get()  # Ambil simpul dengan prioritas terendah

        if current == goal:
            print("Simpul tujuan sudah ditemukan!")
            route = reconstruct_path(path, start, goal)
            print("Jalur terpendek:", route)
            return True

        explored.add(current)  # Menandai simpul saat ini sebagai sudah dieksplorasi

        for neighbor in graph[current]:
            if neighbor not in explored:
                priority = heuristic[neighbor]  # Menggunakan nilai heuristik untuk menentukan prioritas
                frontier.put((priority, neighbor))  # Menambahkan simpul tetangga ke dalam antrian dengan nilai prioritas heuristik
                path[neighbor] = current

    print("Simpul tujuan tidak ditemukan!")
    return False  # Mengembalikan False jika simpul tujuan tidak ditemukan

def reconstruct_path(path, start, goal):
    current = goal
    route = [current]
    while current != start:
        current = path[current]  # Perbaikan penamaan variabel dari 'curent' menjadi 'current'
        route.append(current)
    route.reverse()
    return route



# Daftar heuristik untuk setiap simpul
heuristic = {
    'A': 4,
    'B': 3,
    'C': 3,
    'D': 1,
    'S': 6,
    'G': 0
}

# Graf (dalam bentuk daftar kejadian)
graph = {
    'S': {'B': 2, 'A': 3},
    'A': {'B': 1, 'D': 5},
    'B': {'C': 2, 'D': 3},
    'C': {'D': 3, 'G': 4},
    'D': {'G': 1},

}

# Titik awal dan tujuan
start_node = 'S'
goal_node = 'G'

# Panggil fungsi a_star_search
a_star_search(graph, start_node, goal_node, heuristic)