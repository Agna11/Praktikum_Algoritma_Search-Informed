# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D31i_-G4Z_MnddqMh1oq8d2AGuJYmuFv

A Tree Search*
"""

from queue import PriorityQueue

# Fungsi untuk algoritma A* Search
def a_star_search(graph, start, goal):
    frontier = PriorityQueue()  # Antrian prioritas untuk menyimpan simpul yang akan dieksplorasi
    frontier.put((0 + heuristic[start], start))  # Menambahkan simpul awal ke dalam antrian dengan nilai f(n)

    explored = set()  # Set untuk menyimpan simpul yang sudah dieksplorasi
    path = {}  # Untuk menyimpan jalur yang dilalui
    g_cost = {start: 0}  # Biaya dari start ke setiap simpul

    while not frontier.empty():
        current_f_cost, current = frontier.get()  # Ambil simpul dengan f(n) terendah

        if current == goal:
            print("Simpul tujuan sudah ditemukan!")
            route = reconstruct_path(path, start, goal)
            print("Jalur terpendek:", route)
            return True

        explored.add(current)  # Menandai simpul saat ini sebagai sudah dieksplorasi

        for neighbor in graph[current]:
            tentative_g_cost = g_cost[current] + 1  # Menghitung biaya sementara (misal semua edge memiliki biaya 1)

            # Jika neighbor belum dieksplorasi atau biaya baru lebih rendah
            if neighbor not in explored or tentative_g_cost < g_cost.get(neighbor, float('inf')):
                g_cost[neighbor] = tentative_g_cost  # Update biaya g(n)
                f_cost = tentative_g_cost + heuristic[neighbor]  # Hitung f(n)
                frontier.put((f_cost, neighbor))  # Menambahkan neighbor ke dalam antrian dengan nilai f(n)
                path[neighbor] = current  # Simpan jalur

    print("Simpul tujuan tidak ditemukan!")
    return False  # Mengembalikan False jika simpul tujuan tidak ditemukan

def reconstruct_path(path, start, goal):
    current = goal
    route = [current]
    while current != start:
        current = path[current]
        route.append(current)
    route.reverse()
    return route

# Daftar heuristik untuk setiap simpul
heuristic = {
    'A': 4,
    'B': 3,
    'C': 3,
    'D': 1,
    'S': 6,
    'G': 0
}

# Graf (dalam bentuk daftar kejadian)
graph = {
    'S': ['B', 'A'],
    'A': ['B', 'D'],
    'B': ['C', 'D'],
    'C': ['D', 'G'],
    'D': ['G'],
}

# Titik awal dan tujuan
start_node = 'S'
goal_node = 'G'

# Panggil fungsi A* search
a_star_search(graph, start_node, goal_node)